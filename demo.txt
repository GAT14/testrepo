#include "pch.h"
#include <iostream>
#include <conio.h>

using namespace System;
using namespace std;


int tablero[31][53] = {
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
{1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1},
{1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1},
{1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1},
{1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1},
{1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1},
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
{1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1},
{1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1},
{1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1},
{1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1},
{1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1},
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
{1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,3,3,3,3,3,3,3,3,3,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1},
{1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,3,3,3,3,3,3,3,3,3,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1},
{1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,3,3,3,3,3,3,3,3,3,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1},
{1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,3,3,3,3,3,3,3,3,3,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1},
{1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,3,3,3,3,3,3,3,3,3,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1},
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
{1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1},
{1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1},
{1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1},
{1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1},
{1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1},
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
{1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1},
{1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1},
{1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1},
{1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1},
{1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1},
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
};


struct Player1 {
	//Atributos
	char* nombrep1 = new char[20];
	int x = 6;
	int y = 15;

	//Funciones 
	void moverJugador(char tecla) {
		if (tecla == 'w' && tablero[y - 6][x] == 0 && y - 1 > 6)
		{
			Console::SetCursorPosition(x, y); y -= 6;
			Console::SetCursorPosition(x, y); x += 0;

		}

		if (tecla == 's' && tablero[y + 6][x] == 0 && y + 1 < 31)
		{
			Console::SetCursorPosition(x, y); y += 6;
			Console::SetCursorPosition(x, y); x -= 0;

		}


		if (tecla == 'a' && tablero[y][x - 10] == 0 && x - 1 > 6)
		{
			Console::SetCursorPosition(x, y); y += 0;
			Console::SetCursorPosition(x, y); x -= 10;
		}

		if (tecla == 'd' && tablero[y][x + 10] == 0 && x + 1 < 40)
		{
			Console::SetCursorPosition(x, y); y -= 0;
			Console::SetCursorPosition(x, y); x += 10;

		}

	}

	void mostrarJugador() {
		Console::SetCursorPosition(x, y);
		Console::ForegroundColor = ConsoleColor::Blue;
		cout << char(2);
	}

};




struct Player2 {

	char* nombrep2 = new char[20];
	int x = 26;
	int y = 27;


	void moverJugador(char tecla) {
		if (tecla == 72 && tablero[y - 6][x] == 0 && y - 1 > 6)
		{
			Console::SetCursorPosition(x, y); y -= 6;
			Console::SetCursorPosition(x, y); x += 0;

		}

		if (tecla == 80 && tablero[y + 6][x] == 0 && y + 1 < 31)
		{
			Console::SetCursorPosition(x, y); y += 6;
			Console::SetCursorPosition(x, y); x -= 0;

		}


		if (tecla == 75 && tablero[y][x - 10] == 0 && x - 1 > 6)
		{
			Console::SetCursorPosition(x, y); y += 0;
			Console::SetCursorPosition(x, y); x -= 10;
		}

		if (tecla == 77 && tablero[y][x + 10] == 0 && x + 1 < 40)
		{
			Console::SetCursorPosition(x, y); y -= 0;
			Console::SetCursorPosition(x, y); x += 10;

		}

	}

	void mostrarJugador() {
		Console::SetCursorPosition(x, y);
		Console::ForegroundColor = ConsoleColor::White;
		cout << char(2);
	}
};


void dibujarTablero();
void obtenerTurno(int& p1, int& p2, Player1* player1, Player2* player2);
void ingresarJugadores(Player1* player1, Player2* player2);
void ejecutarMenu();
void mostrarTurno(int& p1, int& p2, Player1* player1, Player2* player2);

int main()
{


	ejecutarMenu();
	dibujarTablero();

	system("pause");
	return 0;
}



void dibujarTablero() {
	for (int i = 0; i < 31; i++)
	{
		for (int j = 0; j < 53; j++)
		{
			Console::SetCursorPosition(j, i);
			if (tablero[i][j] == 0)
				Console::ForegroundColor = ConsoleColor::White;
			else if (tablero[i][j] == 1)
				Console::ForegroundColor = ConsoleColor::DarkBlue;
			else if (tablero[i][j] == 3)
				Console::ForegroundColor = ConsoleColor::DarkGray;
			cout << char(219);
		}
	}

}

void obtenerTurno(int& p1, int& p2, Player1* player1, Player2* player2) {
	Random turnos;

	Console::ForegroundColor = ConsoleColor::White;
	cout << "PROCESANDO TURNOS... " << endl;
	_sleep(1000);

	p1 = turnos.Next(1, 7);
	p2 = turnos.Next(1, 7);

	Console::ForegroundColor = ConsoleColor::White;
	if (p1 > p2)
		cout << "EL PRIMER TURNO SERA PARA: " << player1->nombrep1 << endl;
	else if (p1 < p2)
		cout << "EL PRIMER TURNO SERA PARA: " << player2->nombrep2 << endl;


	system("pause");
	system("cls");
	for (int i = 0; i < 25; i++) {
		cout << "CARGANDO... " << endl;
		cout << "=========================" << endl;

		for (int j = 0; j < i; j++)
		{
			cout << char(219);
		}
		cout << endl;
		cout << "=========================" << endl;
		system("cls");

	}
}

void ingresarJugadores(Player1* player1, Player2* player2)
{
	Console::ForegroundColor = ConsoleColor::White;
	cout << "INGRESE EL NOMBRE DEL PLAYER 1: " << endl;

	Console::ForegroundColor = ConsoleColor::DarkRed;
	cin >> player1->nombrep1;

	Console::ForegroundColor = ConsoleColor::White;
	cout << "INGRESE EL NOMBRE DEL PLAYER 2: " << endl;

	Console::ForegroundColor = ConsoleColor::DarkRed;
	cin >> player2->nombrep2;

}

void mostrarTurno(int& p1, int& p2, Player1* player1, Player2* player2) {
	Console::ForegroundColor = ConsoleColor::White;

	if (p1 > p2) {
		cout << endl;
		cout << "|TURNO DE|" << endl;
		cout << player1->nombrep1 << endl;
	}
	else if (p1 < p2)
	{
		cout << endl;
		cout << "|TURNO DE|" << endl;
		cout << player2->nombrep2 << endl;
	}
}


void ejecutarMenu() {


	int num;
	int turnop1, turnop2;
	Player1* player1 = new Player1;
	Player2* player2 = new Player2;

	while (true)
	{
		
		cout << endl;
		Console::ForegroundColor = ConsoleColor::White;
		cout << "-----------------------------------" << endl;
		cout << "|               MENU              |" << endl;
		cout << "-----------------------------------" << endl;
		Console::ForegroundColor = ConsoleColor::DarkRed;
		cout << "1) JUGAR" << endl;
		Console::ForegroundColor = ConsoleColor::White;
		cout << "2) REGLAS" << endl;
		Console::ForegroundColor = ConsoleColor::DarkRed;
		cout << "3) INTEGRANTES DEL GRUPO" << endl;
		Console::ForegroundColor = ConsoleColor::White;
		cout << "4) CONTROLES" << endl;
		Console::ForegroundColor = ConsoleColor::DarkRed;
		cout << "5) SALIR" << endl;
		cin >> num;
		system("cls");

		switch (num)
		{
		case 1:

			system("cls");
			ingresarJugadores(player1, player2);
			system("cls");
			obtenerTurno(turnop1, turnop2, player1, player2);
			dibujarTablero();
			mostrarTurno(turnop1, turnop2, player1, player2);

			while (true)
			{
				if (_kbhit()) {
					dibujarTablero();
					Console::CursorVisible = false;
					char teclaPresionada = getch();
					player1->moverJugador(teclaPresionada);
					player1->mostrarJugador();


					player2->moverJugador(teclaPresionada);
					player2->mostrarJugador();
				}

			}

			break;
		case 2:


			system("cls");
			Console::ForegroundColor = ConsoleColor::White;
			cout << "--------------------------------- " << endl;
			cout << "|        REGLAS DEL JUEGO        |" << endl;
			cout << "--------------------------------- " << endl;

			cout << "REGLA 1: Los dos jugadores van colonacdo 2 fichas por casilla vacia salvo el del centro." << endl;
			cout << endl;
			cout << "REGLA 2: El jugador que coloca sus 2 ultimas fichas es quien comienza la segunda fase." << endl;
			cout << endl;
			cout << "REGLA 3: Desplazar una ficha a cualquier casilla contigua libre, comprendida la del centro, en vertical u horizontal, pero no en diagonal." << endl; cout << endl;
			cout << endl;
			cout << "REGLA 4: Una ficha es capturada y removida si esta es encerrada entre dos fichas contrarias; pero no en sentido diagonal." << endl;
			cout << endl;
			cout << "REGLA 5: Un solo movimiento puede implicar el encierro y la captura de varias piezas a la vez." << endl;
			cout << endl;
			cout << "REGLA 6: El jugador que realiza una captura puede seguir moviendo la misma ficha que realizo el ultimo movimiento mientras siga capturando." << endl;
			cout << endl;
			cout << "REGLA 7: Una ficha que se coloca voluntariamente entre dos fichas enemigas no es capturada, salvo si una de las piezas enemigas se retira y vuelve." << endl;
			cout << endl;
			cout << "REGLA 8: La ficha que ocupa la casilla central (la que es sombreada de verde) no puede ser capturada." << endl;
			cout << endl;
			cout << "REGLA 9: Cuando un jugador no puede mover le pasa el turno, al contrario." << endl;
			cout << endl;
			cout << "REGLA 10: Se gana si se capturan todas las fichas contrarias." << endl;
			cout << endl;
			cout << "REGLA 11: Cada jugador puede construir una barrera (o muro) con fichas detras de la cual solo se encuentran sus propias fichas que pueden moverse sin peligro de ser capturadas." << endl;
			cout << endl;
			cout << "REGLA 12: En el caso de existir una barrera gana el jugador que tiene la mayor cantidad de fichas, si tienen la misma cantidad es un empate." << endl;
			cout << endl;

			system("pause");
			system("cls");
			break;
		case 3:
			system("cls");
			Console::ForegroundColor = ConsoleColor::White;
			cout << "--------------------------------- " << endl;
			cout << "|           INTEGRANTES          |" << endl;
			cout << "--------------------------------- " << endl;
			Console::ForegroundColor = ConsoleColor::DarkRed;
			cout << "Integrante 1 :    " << endl;
			cout << endl;
			cout << "Integrante 2 :    " << endl;
			cout << endl;
			cout << "Integrante 3 :    " << endl;
			cout << endl;
			cout << "Integrante 4 :    " << endl;
			cout << endl;

			system("pause");
			system("cls");
			break;
		case 4:
			system("cls");
			Console::ForegroundColor = ConsoleColor::White;
			cout << "--------------------------------- " << endl;
			cout << "|           CONTROLES            |" << endl;
			cout << "--------------------------------- " << endl;
			cout << "             PLAYER 1             " << endl;
			cout << endl;
			Console::ForegroundColor = ConsoleColor::DarkRed;
			cout << "   W arriba" << endl;
			cout << "   S abajo" << endl;
			cout << "   A izquierda" << endl;
			cout << "   D derecha" << endl;
			cout << endl;
			Console::ForegroundColor = ConsoleColor::White;
			cout << "------------------------------------" << endl;
			cout << endl;
			cout << "             PLAYER 2            " << endl;
			cout << endl;
			Console::ForegroundColor = ConsoleColor::DarkRed;

			cout << "   Flecha para arriba" << endl;
			cout << "   Flecha para abajo" << endl;
			cout << "   Flecha para la izquierda" << endl;
			cout << "   Flecha para la derecha" << endl;
			cout << endl;


			system("pause");
			system("cls");

			break;
		case 5:

			break;
		default:
			if (num < 1 || num >4)
			{
				system("cls");
				Console::ForegroundColor = ConsoleColor::White;
				cout << "-----------------------------------" << endl;
				cout << "|Porfavor ingrese un numero valido|" << endl;
				cout << "-----------------------------------" << endl;
				system("pause");
				system("cls");
				break;

			}
		}

	}

}